#!/usr/bin/env python3
"""
Claude Controller Client
Sends commands to the launch manager
"""
import socket
import json
import sys
import argparse
from pathlib import Path

# Resolve symlinks to get the actual script location
script_path = Path(__file__).resolve()
controller_dir = script_path.parent

# Load configuration
config_path = controller_dir / 'config.json'
if config_path.exists():
    with open(config_path, 'r') as f:
        config = json.load(f)
else:
    # Default configuration if config.json doesn't exist
    config = {
        'socket': {
            'path': 'claude_controller.sock',
            'timeout': 1.0
        }
    }

# Get socket path from config
socket_filename = config.get('socket', {}).get('path', 'claude_controller.sock')
DEFAULT_SOCKET_PATH = str(controller_dir / socket_filename)

def send_command(command: str, args: list, socket_path: str) -> dict:
    """Send command to the launch manager"""
    try:
        client = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        client.connect(socket_path)
        
        request = {'command': command, 'args': args}
        client.send(json.dumps(request).encode())
        
        response = client.recv(4096)
        client.close()
        
        return json.loads(response.decode())
    except FileNotFoundError:
        return {
            'success': False, 
            'error': 'Launch manager not running. Start it with: .claudecontroller.d/launch.sh'
        }
    except Exception as e:
        return {'success': False, 'error': str(e)}

def print_response(response: dict, verbose: bool = False, json_output: bool = False):
    """Pretty print the response"""
    if json_output:
        print(json.dumps(response, indent=2))
        return
        
    if response['success']:
        if 'message' in response:
            print(response['message'])
        elif 'processes' in response:
            # Status command
            processes = response['processes']
            if not processes:
                print("No managed processes")
            else:
                for name, info in processes.items():
                    status = info.get('status', 'unknown')
                    if status == 'running':
                        print(f"[{name}] {status} (pid: {info['pid']})")
                        if verbose:
                            print(f"  Command: {info['command']}")
                            print(f"  Started: {info['started']}")
                    else:
                        print(f"[{name}] {status}")
                        if verbose and 'command' in info:
                            print(f"  Command: {info['command']}")
        elif 'commands' in response:
            # List commands
            print("Available commands:")
            for cmd, help_text in sorted(response['commands'].items()):
                print(f"  {cmd:<20} - {help_text}")
        elif 'help' in response:
            # Help command
            print(f"Command: {response['command']}")
            print(f"Help: {response['help']}")
        elif 'output' in response:
            # Command output
            print(response['output'])
        elif '_raw_status' in response and json_output:
            # Special case for status with raw data
            print(json.dumps(response['_raw_status'], indent=2))
        elif 'pid' in response:
            # Process started
            print(f"Process started with PID: {response['pid']}")
            if 'name' in response:
                print(f"Process name: {response['name']}")
        else:
            # Generic success
            if verbose:
                print(json.dumps(response, indent=2))
            else:
                print("Command completed successfully")
    else:
        print(f"Error: {response.get('error', 'Unknown error')}")

def main():
    # Create parser with add_help=False to handle help manually
    parser = argparse.ArgumentParser(
        add_help=False,
        description='Claude Controller - Manage long-running processes'
    )
    
    # Global options (must come before command)
    parser.add_argument('-h', '--help', action='store_true',
                        help='Show this help message')
    parser.add_argument('-v', '--verbose', action='store_true',
                        help='Verbose output')
    parser.add_argument('-s', '--socket', default=DEFAULT_SOCKET_PATH,
                        help='Socket path (default: .claudecontroller.d/claude_controller.sock)')
    parser.add_argument('--json', action='store_true',
                        help='Output in JSON format')
    
    # Command and its arguments
    parser.add_argument('command', nargs='?', help='Command to execute')
    parser.add_argument('args', nargs=argparse.REMAINDER, 
                        help='Arguments for the command')
    
    # Parse known args to handle the case where command args look like our args
    args, unknown = parser.parse_known_args()
    
    # Handle help cases
    if args.help and not args.command:
        # claudecontroller --help
        parser.print_help()
        print("\nUse 'claudecontroller list-commands' to see all available commands")
        print("Use 'claudecontroller help <command>' to see help for a specific command")
        sys.exit(0)
    
    if not args.command:
        parser.print_help()
        sys.exit(1)
    
    # If there are unknown args, they belong to the command
    if unknown:
        args.args = unknown + args.args
    
    # Special handling for help command
    if args.help and args.command:
        # claudecontroller --help <command> -> convert to help <command>
        response = send_command('help', [args.command], args.socket)
    else:
        # Normal command execution
        response = send_command(args.command, args.args, args.socket)
    
    # Print response
    print_response(response, args.verbose, args.json)
    
    # Exit with appropriate code
    sys.exit(0 if response['success'] else 1)

if __name__ == '__main__':
    main()